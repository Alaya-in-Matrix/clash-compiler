{"name":"CλaSH","tagline":"CAES Language for Synchronous Hardware","body":"<p align=\"center\">\r\n  <img align=\"center\" src=\"http://christiaanb.github.io/clash2/images/logo_dark.png\" alt=\"logo\" width=\"30%\" BORDER=\"0\"/>\r\n</p>\r\n\r\n# Introduction\r\nCλaSH (pronounced ‘clash’) is a functional hardware description language that borrows both its syntax and semantics from the functional programming language Haskell. The merits of using a functional language to describe hardware comes from the fact that combinational circuits can be directly modeled as mathematical functions and that functional languages lend themselves very well at describing and (de-)composing mathematical functions. The CλaSH compiler transforms these high-level descriptions to low-level synthesizable VHDL.\r\n\r\nAn experimental version of the new CλaSH compiler and some examples can be found below.  \r\n**!! The compiler and the CλaSH Prelude library are subject to change !!**\r\n\r\n# Installation\r\nThe CλaSH compiler and Prelude library for circuit design only work with the\r\n[GHC](http://haskell.org/ghc) Haskell compiler version 7.8.* and up.\r\n\r\n1. Install **GHC (version 7.8.* or higher)**\r\n\r\n      * Download and install [GHC for your platform](http://www.haskell.org/ghc/download).\r\n        Unix user can use `./configure prefix=<LOCATION>` to set the installation\r\n        location.\r\n\r\n      * Make sure that the `bin` directory of **GHC** is in your `PATH`.\r\n\r\n2. Install **Cabal (version 1.18.* or higher)**\r\n\r\n      * Binary, when available:\r\n\r\n          * Download the [binary for cabal-install](http://www.haskell.org/cabal/download.html)\r\n          * Put the binary in a location mentioned in your `PATH`\r\n\r\n      * Source:\r\n\r\n          * Download the [sources for cabal-install](http://www.haskell.org/cabal/download.html)\r\n          * Unpack (`tar xf`) the archive and `cd` to the directory\r\n          * Run `sh bootstrap.sh`\r\n          * Follow the instructions to add `cabal` to your `PATH`\r\n\r\n      * Run `cabal update`\r\n\r\n3. Install **CλaSH**\r\n\r\n      * Run `cabal install clash-ghc`\r\n\r\n4. Verify that everything is working by:\r\n\r\n      * Downloading the [FIR.hs](https://raw.githubusercontent.com/christiaanb/clash2/master/examples/FIR.hs) example\r\n      * Run `clash --interactive FIR.hs`\r\n      * Execute, in the interpreter, the `:vhdl` command.\r\n      * Exit the interpreter using `:q`\r\n      * Examine the VHDL code in the `vhdl` directory\r\n\r\n# Documentation\r\n[Tutorial](http://hackage.haskell.org/package/clash-prelude/docs/CLaSH-Tutorial.html)  \r\n[Reference documentation](http://hackage.haskell.org/package/clash-prelude/docs/CLaSH-Prelude.html)\r\n\r\n# Examples\r\n[FIR.hs](https://raw.githubusercontent.com/christiaanb/clash2/master/examples/FIR.hs)  \r\n[Calculator.hs](https://raw.githubusercontent.com/christiaanb/clash2/master/examples/Calculator.hs) (Requires [CalculatorTypes.hs](https://raw.githubusercontent.com/christiaanb/clash2/master/examples/CalculatorTypes.hs) )\r\n\r\n# Support\r\nFor updates and questions join the mailing list clash-language+subscribe@googlegroups.com or read the [forum](https://groups.google.com/d/forum/clash-language).  \r\nBug reports for the CLaSH compiler: http://github.com/christiaanb/clash2/issues  \r\nBug reports for the CLaSH prelude library: http://github.com/christiaanb/clash-prelude/issues\r\n\r\n# Publications\r\n* Wester, R. and Kuper, J. (2014) **Design space exploration of a particle filter using higher-order functions**. In: _Reconfigurable Computing: Architectures, Tools, and Applications_. Lecture Notes in Computer Science 8405. Springer Verlag, London, pp. 219-226. ISSN 0302-9743 ISBN 978-3-319-05959-4. [link](http://eprints.eemcs.utwente.nl/24700/)\r\n\r\n* A Niedermeier. **A Fine-Grained Parallel Dataflow-Inspired Architecture for Streaming Applications**. PhD thesis, University of Twente, Enschede, The Netherlands, August 2014. [link](http://eprints.eemcs.utwente.nl/25011/)\r\n\r\n* X. Jin. (2014) **Implementation of the MUSIC Algorithm in CλaSH**. Master's thesis, University of Twente, Enschede, The Netherlands, June 2014. [link](http://essay.utwente.nl/65225/)\r\n\r\n* F. Van Nee. (2014) **To a new hardware design methodology: A case study of the cochlea model.** Master's thesis, University of Twente, Enschede, The Netherlands, March 2014. [link](http://essay.utwente.nl/64835/)\r\n\r\n* Baaij, C.P.R. and Kuper, J. (2014) <strong>Using Rewriting to Synthesize Functional Languages to Digital Circuits</strong>. In: <em>Jay McCarthy, editor, Trends in Functional Programming (TFP)</em>, Provo, UT, USA, May 14-16, 2013. Volume 8322 of <em>Lecture Notes in Computer Science (LNCS)</em>. pages 17–33. Springer-Verlag. ISBN 978-3-642-45340-3. <a href=\"http://eprints.eemcs.utwente.nl/23904/\">link</a>\r\n\r\n* Wester, R. and Baaij, C.P.R. and Kuper, J. (2012) <strong>A two step hardware design method using CλaSH.</strong>. In: <em>Proceedings of the 22nd International Conference on Field Programmable Logic and Applications (FPL)</em>, Aug 29-31, 2012, Oslo, Norway. pages 181-188. IEEE Computer Society. ISBN 978-1-4673-2257-7. <a href=\"http://eprints.eemcs.utwente.nl/22585/\">link</a>\r\n\r\n* Wester, R. and Sarakiotis, D. and Kooistra, E. and J. Kuper. (2012) **Specifications of APERTIF Polyphase Filter Bank in CλaSH**. In _Communicating Process Architectures (CPA)_, pages 53-64, United Kingdom, August 2012. Open Channel Publishing. ISBN 978-0-9565409-5-9. [link](http://eprints.eemcs.utwente.nl/22586/)\r\n\r\n* Gerards, M.E.T. and Baaij, C.P.R. and Kuper, J. and Kooijman, M. (2011) <strong>Higher-Order Abstraction in Hardware Descriptions with CλaSH</strong>. In: <em>Proceedings of the 14th Conference on Digital System Design (DSD)</em>, Oulu, Finland. pages 495-502, 31 Aug - 2 September, 2011. IEEE Computer Society. ISBN 978-0-7695-4494-6. <a href=\"http://eprints.eemcs.utwente.nl/20645/\">link</a>\r\n\r\n* Kuper, J. and Baaij, C.P.R. and Kooijman, M. and Gerards, M.E.T. (2010) <strong>Exercises in architecture specification using CλaSH</strong>. In: <em>Proceedings of Forum on Specification and Design Languages (FDL)</em>, 2010, Southampton, England, Sept 13-16. pages 178-183. Electronic Chips & Systems design Initiative (ECSI). ISSN 1636-9874. <a href=\"http://eprints.eemcs.utwente.nl/22072/\">link</a>\r\n\r\n* Niedermeier, A. and Wester, R. and Rovers, K.C. and Baaij, C.P.R. and Kuper, J. and Smit, G.J.M. (2010) **Designing a dataflow processor using CλaSH**. In: _28th Norchip Conference, 15-16 November 2010, Tampere, Finland. 69. IEEE Circuits and Systems Society. ISBN 978-1-4244-8971-8. [link](http://eprints.eemcs.utwente.nl/18904/)\r\n\r\n* Baaij, C.P.R. and Kooijman, M. and Kuper, J. and Boeijink, W.A. and Gerards, M.E.T. (2010) <strong>CλaSH: Structural Descriptions of Synchronous Hardware using Haskell</strong>. In: <em>Proceedings of the 13th Conference on Digital System Design (DSD)</em>, Lille, France, Sept 1-3, 2010. pages 714-721. IEEE Computer Society. ISBN 978-0-7695-4171-6. <a href=\"http://eprints.eemcs.utwente.nl/18376/\">link</a>","google":"UA-42920604-1","note":"Don't delete this file! It's used internally to help with page regeneration."}