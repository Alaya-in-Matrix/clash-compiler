[ { "BlackBox" :
    { "name"      : "GHC.Integer.Type.smallInteger"
    , "templateE" : "~ARG[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.integerToInt"
    , "templateE" : "~ARG[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.plusInteger"
    , "templateE" : "~ARG[0] + ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.minusInteger"
    , "templateE" : "~ARG[0] - ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.timesInteger"
    , "templateE" : "~ARG[0] * ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.negateInteger"
    , "templateE" : "-~ARG[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.absInteger"
    , "templateE" : "abs ~ARG[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.divInteger"
    , "templateD" :
"// divInteger_~SYM[0]
wire ~SIGD[~SYM[1]][1];
wire ~SIGD[~SYM[2]][0];
wire ~SIGD[~SYM[3]][1];

// divide (rounds towards zero)
assign ~SYM[1] = ~ARG[0] / ~ARG[1];

// take absolute
assign ~SYM[2] = ~ARG[0] < 32'sd0 ? -~ARG[0] : ~ARG[0];
assign ~SYM[3] = ~ARG[1] < 32'sd0 ? -~ARG[1] : ~ARG[1];

// round toward minus infinity
assign ~RESULT = ((~ARG[0] == ~SYM[2]) != (~ARG[1] == ~SYM[3])) ?
                 ~SYM[1] - 1 :
                 ~SYM[1];"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.modInteger"
    , "templateE" : "~ARG[0] mod ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.quotInteger"
    , "templateE" : "~ARG[0] div ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.remInteger"
    , "templateE" : "~ARG[0] rem ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.eqInteger"
    , "templateE" : "~ARG[0] = ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.neqInteger"
    , "templateE" : "~ARG[0] /= ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.leInteger"
    , "templateE" : "~ARG[0] <= ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.gtInteger"
    , "templateE" : "~ARG[0] > ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.ltInteger"
    , "templateE" : "~ARG[0] < ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.geInteger"
    , "templateE" : "~ARG[0] >= ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.eqInteger#"
    , "templateE" : "(~ARG[0] == ~ARG[1]) ? 32'sd1 : 32'sd0"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.neqInteger#"
    , "templateE" : "1 when ~ARG[0] /= ~ARG[1] else 0"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.leInteger#"
    , "templateE" : "1 when ~ARG[0] <= ~ARG[1] else 0"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.gtInteger#"
    , "templateE" : "1 when ~ARG[0] > ~ARG[1] else 0"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.ltInteger#"
    , "templateE" : "1 when ~ARG[0] < ~ARG[1] else 0"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.geInteger#"
    , "templateE" : "1 when ~ARG[0] >= ~ARG[1] else 0"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.shiftRInteger"
    , "templateE" : "~ARG[0] / (2**~ARG[1])"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Integer.Type.shiftLInteger"
    , "templateE" : "~ARG[0] * (2**~ARG[1])"
    }
  }
]
