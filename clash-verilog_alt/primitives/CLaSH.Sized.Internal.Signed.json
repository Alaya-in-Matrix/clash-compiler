[ { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Internal.Signed.size#"
    , "templateE" : "~LIT[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.pack#"
    , "templateE" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.unpack#"
    , "templateE" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.eq#"
    , "templateE" : "~ARG[0] == ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.neq#"
    , "templateE" : "~ARG[0] != ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.lt#"
    , "templateE" : "~ARG[0] < ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.ge#"
    , "templateE" : "~ARG[0] >= ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.gt#"
    , "templateE" : "~ARG[0] > ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.le#"
    , "templateE" : "~ARG[0] <= ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.minBound#"
    , "comment"   : "Generates incorrect VDHL for n=0"
    , "comment2"  : "the quantification with signed gives the array an ascending index"
    , "templateE" : "{1'b1, {(~LIT[0]-1) {1'b0}}}"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.maxBound#"
    , "comment"   : "Generates incorrect VDHL for n=0"
    , "comment2"  : "the quantification with signed gives the array an ascending index"
    , "templateE" : "{1'b0, {(~LIT[0]-1) {1'b1}}}"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.+#"
    , "templateE" : "~ARG[1] + ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.-#"
    , "templateE" : "~ARG[1] - ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.*#"
    , "templateE" : "~ARG[1] * ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.negate#"
    , "templateE" : "-~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.abs#"
    , "templateE" : "(~ARG[1] < ~LIT[0]'sd0) ? -~ARG[1] : ~ARG[1]"
    }
  }
, { "Primitive" :
    { "name"     : "CLaSH.Sized.Internal.Signed.fromInteger#"
    , "primType" : "Function"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.plus#"
    , "templateE" : "~ARG[1] + ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.minus#"
    , "templateE" : "~ARG[1] - ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.times#"
    , "templateE" : "~ARG[1] * ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.quot#"
    , "templateE" : "~ARG[1] / ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.rem#"
    , "templateE" : "~ARG[1] % ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.div#"
    , "templateD" :
"// divInt
wire ~SIGD[~SYM[0]][1];
wire ~SIGD[~SYM[1]][1];
wire ~SIGD[~SYM[2]][2];

// divide (rounds towards zero)
assign ~SYM[0] = ~ARG[1] / ~ARG[2];

// round toward minus infinity
assign ~SYM[1] = ~ARG[1];
assign ~SYM[2] = ~ARG[2];
assign ~RESULT = (~SYM[1][~LIT[0]-1] == ~SYM[2][~LIT[0]-1]) ? ~SYM[0] : ~SYM[0] - ~LIT[0]'sd1;"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.mod#"
    , "templateD" :
"// modSigned
wire ~SIGD[~SYM[0]][1];
wire ~SIGD[~SYM[1]][1];
wire ~SIGD[~SYM[2]][2];

// remainder
assign ~SYM[0] = ~ARG[1] % ~ARG[2];

// modulo
assign ~SYM[1] = ~ARG[1];
assign ~SYM[2] = ~ARG[2];
assign ~RESULT = (~SYM[1][~LIT[0]-1] == ~SYM[2][~LIT[0]-1]) ?
                 ~SYM[0] :
                 (~ARG[1] == ~LIT[0]'sd0 ? ~LIT[0]'sd0 : ~SYM[0] + ~ARG[1]);"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.toInteger#"
    , "templateE" : "$signed(~ARG[0])"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.and#"
    , "templateE" : "~ARG[1] & ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.or#"
    , "templateE" : "~ARG[1] | ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.xor#"
    , "templateE" : "~ARG[1] ^ ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.complement#"
    , "templateE" : "~ ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.shiftL#"
    , "templateE" : "~ARG[1] <<< ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.shiftR#"
    , "templateE" : "~ARG[1] >>> ~ARG[2]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.rotateL#"
    , "templateD" :
"// rotateL
wire [2*~LIT[0]-1:0] ~SYM[0];
assign ~SYM[0] = {~ARG[1],~ARG[1]} << ~ARG[2];
assign ~RESULT = $signed(~SYM[0][~LIT[1]-1 : 0]);"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.rotateR#"
    , "templateD" :
"// rotateR
wire [2*~LIT[0]-1:0] ~SYM[0];
assign ~SYM[0] = {~ARG[1],~ARG[1]} >> ~ARG[2];
assign ~RESULT = $signed(~SYM[0][~LIT[1]-1 : 0]);"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Internal.Signed.resize#"
    , "templateE" : "$signed(~ARG[2])"
    }
  }
]
