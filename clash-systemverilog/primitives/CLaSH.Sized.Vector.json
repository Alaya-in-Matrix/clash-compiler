[ { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.eq#"
    , "templateE" : "~ARG[0] == ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.neq#"
    , "templateE" : "~ARG[0] != ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.head"
    , "templateD" :
"// head
~SIGD[~SYM[0]][0];
assign ~SYM[0] = ~ARG[0];

assign ~RESULT = ~SYM[0][0];"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.tail"
    , "templateD" :
"// tail
~SIGD[~SYM[0]][0];
assign ~SYM[0] = ~ARG[0];

assign ~RESULT = ~SYM[0][1 : $high(~SYM[0])];"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.last"
    , "templateD" :
"// last
~SIGD[~SYM[0]][0];
assign ~SYM[0] = ~ARG[0];

assign ~RESULT = ~SYM[0][$high(~SYM[0])];"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.init"
    , "templateD" :
"// init
~SIGD[~SYM[0]][0];
assign ~SYM[0] = ~ARG[0];

assign ~RESULT = ~SYM[0][0 : $high(~SYM[0]) - 1];"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.select"
    , "comment"   :
    "select :: (CmpNat (i + s) (s * n) ~ GT) -- ARG[0]
            => SNat f                        -- ARG[1]
            -> SNat s                        -- ARG[2]
            -> SNat n                        -- ARG[3]
            -> Vec i a                       -- ARG[4]
            -> Vec n a"
    , "templateD" :
"// select
~SIGD[~SYM[0]][4];
assign ~SYM[0] = ~ARG[4];

genvar ~SYM[1];
generate
  for (~SYM[1]=0; ~SYM[1] < ~LIT[3]; ~SYM[1] = ~SYM[1] + 1) begin : select_~SYM[2]
    assign ~RESULT[~SYM[1]] = ~SYM[0][~LIT[1] + (~LIT[2] * ~SYM[1])];
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.++"
    , "templateD" :
"// (++)
~SIGD[~SYM[0]][0];
~SIGD[~SYM[1]][1];

assign ~SYM[0] = ~ARG[0];
assign ~SYM[1] = ~ARG[1];

genvar ~SYM[2];
generate
  for (~SYM[2]=0; ~SYM[2] < $size(~RESULT); ~SYM[2] = ~SYM[2] + 1) begin : append_~SYM[3]
    if (~SYM[2] < $size(~SYM[0])) begin
      assign ~RESULT[~SYM[2]] = ~SYM[0][~SYM[2]];
    end else begin
      assign ~RESULT[~SYM[2]] = ~SYM[1][~SYM[2]-$size(~SYM[0])];
    end
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.concat"
    , "templateD" :
"// concat
~SIGD[~SYM[0]][0];
assign ~SYM[0] = ~ARG[0];

genvar ~SYM[1];
generate
  for (~SYM[1]=0; ~SYM[1] < $size(~SYM[0]); ~SYM[1] = ~SYM[1] + 1) begin : concat_~SYM[2]
    assign ~RESULT[(~SYM[5] * $size(~SYM[0][0])) : ((~SYM[5] * $size(~SYM[0][0])) + $high(~SYM[0][0]))] = ~SYM[0][~SYM[1]];
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.splitAt"
    , "templateD" :
"// splitAt
~SIGD[~SYM[0]][1];
assign ~SYM[0] = ~ARG[1];

assign ~RESULT = '{~SYM[0][$left(~RESULT.~TYPMO_sel0) : $right(~RESULT.~TYPMO_sel0)]
                  ,~SYM[0][($left(~RESULT.~TYPMO_sel1) + $size(~RESULT.~TYPMO_sel0)) : ($right(~RESULT.~TYPMO_sel1) + $size(~RESULT.~TYPMO_sel0))]
                  };"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.unconcat"
    , "comment"   :
    "unconcat :: KnownNat n     -- ARG[0]
              => SNat m         -- ARG[1]
              -> Vec (n * m) a  -- ARG[2]
              -> Vec n (Vec m a)"
    , "templateD" :
"// unconcat
~SIGD[~SYM[0]][2];
assign ~SYM[0] = ~ARG[2];

genvar ~SYM[1];
generate
  for (~SYM[1] = 0; ~SYM[1] < $size(~RESULT); ~SYM[1] = ~SYM[1] + 1) begin : unconcat_~SYM[2]
    assign ~RESULT[~SYM[1]] = ~SYM[0][(~SYM[1] * ~LIT[1]) : ((~SYM[1] * ~LIT[1]) + ~LIT[1] - 1)];
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.merge"
    , "templateD" :
"// merge
~SIGD[~SYM[0]][0];
~SIGD[~SYM[1]][1];
assign ~SYM[0] = ~ARG[0];
assign ~SYM[1] = ~ARG[1];

genvar ~SYM[2];
generate
  for (~SYM[2] = 0; ~SYM[2] < $size(~SYM[0]); ~SYM[2] = ~SYM[2] + 1) begin : merge_~SYM[3]
    assign ~RESULT[2*~SYM[2]]   = ~SYM[0][~SYM[2]];
    assign ~RESULT[2*~SYM[2]+1] = ~SYM[1][~SYM[2]];
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.map"
    , "templateD" :
"// map
~SIGD[~SYM[0]][1];
assign ~SYM[0] = ~ARG[1];

genvar ~SYM[1];
generate
  for (~SYM[1]=0; ~SYM[1] < $size(~RESULT); ~SYM[1] = ~SYM[1] + 1) begin : map_~SYM[2]
    ~INST 0
      ~OUTPUT <= ~RESULT[~SYM[1]]~ ~TYPEL[~TYPO]~
      ~INPUT  <= ~SYM[0][~SYM[1]]~ ~TYPEL[~TYP[1]]~
    ~INST
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.zipWith"
    , "templateD" :
"// zipWith
~SIGD[~SYM[0]][1];
~SIGD[~SYM[1]][2];
assign ~SYM[0] = ~ARG[1];
assign ~SYM[1] = ~ARG[2];

genvar ~SYM[2];
generate
  for (~SYM[2] = 0; ~SYM[2] < $size(~RESULT); ~SYM[2] = ~SYM[2] + 1) begin : zipWith_~SYM[2]
    ~INST 0
      ~OUTPUT <= ~RESULT[~SYM[2]]~ ~TYPEL[~TYPO]~
      ~INPUT  <= ~SYM[0][~SYM[2]]~ ~TYPEL[~TYP[1]]~
      ~INPUT  <= ~SYM[1][~SYM[2]]~ ~TYPEL[~TYP[2]]~
    ~INST
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.index_integer"
    , "templateD" :
"// index_integer
~SIGD[~SYM[0]][1];
~SIGD[~SYM[1]][2];

assign ~SYM[0] = ~ARG[1];
assign ~SYM[1] = ~ARG[2];


always_comb begin
// pragma translate_off
  if (~SYM[1] < $low(~SYM[0]) || ~SYM[1] > $high(~SYM[0])) begin
    $display(\"Index: %d, is out of bounds: %d to %d\", ~SYM[1], $low(~SYM[0]), $high(~SYM[0]));
    ~RESULT = ~ERRORO;
  end else begin
  // pragma translate_on
    ~RESULT = ~SYM[0][~SYM[1]];
  // pragma translate_off
  end
// pragma translate_on
end"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.replace_integer"
    , "templateD" :
"// replace_integer
~SIGD[~SYM[0]][2];
assign ~SYM[0] = ~ARG[2];

~SIGD[~SYM[1]][1];
always @(*) begin
  ~SYM[1] <= ~ARG[1];
  // pragma translate_off
  if ~SYM[0] < $low(~SYM[2]) || ~SYM[0] > $high(~SYM[2]) begin
    $display(\"Index: %d, is out of bounds: %d to %d\", ~SYM[0], $low(~SYM[1]), $high(~SYM[1]));
    ~SYM[1] <= ~ERROR[1];
  end else begin
    // pragma translate_on
    ~SYM[1][~SYM[0]] <= ~ARG[3];
    // pragma translate_off
  end
  // pragma translate_on
end

assign ~RESULT = ~SYM[1];"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.maxIndex"
    , "templateE" : "~LIT[0] - 1"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.length"
    , "templateE" : "~LIT[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.replicate"
    , "templateE" : "'{~LIT[0] {~ARG[1]}}"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.reverse"
    , "templateD" :
"// reverse
~SIGD[~SYM[0]][0];
assign ~SYM[0] = ~ARG[0];

genvar ~SYM[1];
generate
  for (~SYM[1] = 0; ~SYM[1] < $size(~SYM[0]); ~SYM[1] = ~SYM[1] + 1) begin : reverse_~SYM[2]
    assign ~RESULT[$high(~SYM[0]) - ~SYM[1]] = ~SYM[0][~SYM[1]];
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.lazyV"
    , "templateE" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.concatBitVector#"
    , "comment"   :
      "concatBitVector# :: KnownNat m           -- ARG[0]
                        => Vec n (BitVector m)  -- ARG[1]
                        -> BitVector (n * m)"
    , "templateD" :
"// concatBitVector
~SIGD[~SYM[0]][1];
assign ~SYM[0] = ~ARG[1];

genvar ~SYM[1];
generate
  for (~SYM[1] = 0; ~SYM[1] < $size(~SYM[0]); ~SYM[1] = ~SYM[1] + 1) begin : concatBitVector_~SYM[2]
    assign ~RESULT[((~SYM[1] * ~LIT[0]) + ~LIT[0] - 1) : (~SYM[1] * ~LIT[0])] = ~SYM[0][~SYM[1]];
  end
endgenerate"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Sized.Vector.unconcatBitVector#"
    , "comment"   :
      "unconcatBitVector# :: (KnownNat n, KnownNat m) -- (ARG[0],ARG[1])
                          => BitVector (n * m)        -- ARG[2]
                          -> Vec n (BitVector m)"
    , "templateD" :
"// unconcatBitVector
~SIGD[~SYM[0]][2];
assign ~SYM[0] = ~ARG[2];

genvar ~SYM[1];
generate
  for (~SYM[1] = 0; ~SYM[1] < $size(~RESULT); ~SYM[1] = ~SYM[1] + 1) begin : unconcatBitVector_~SYM[2]
    assign ~RESULT[~SYM[1]] = ~SYM[0][((~SYM[1] * ~LIT[1]) + ~LIT[1] - 1) : (~SYM[1] * ~LIT[1])];
  end
endgenerate"
    }
  }
]
