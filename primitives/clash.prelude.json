[ { "BlackBox" :
    { "name"      : "CLaSH.Prelude.blockRam"
    , "comment"   :
    "blockRam :: (Pack a, KnownNat n, KnownNat m) -- (ARG[0],ARG[1],ARG[2])
              => Vec n a                          -- init,  ARG[3]
              -> Signal (Unsigned m)              -- write, ARG[4]
              -> Signal (Unsigned m)              -- read,  ARG[5]
              -> Signal Bool                      -- wen,   ARG[6]
              -> Signal a                         -- din,   ARG[7]
              -> Signal a"
    , "templateD" :
"~SYM[0]_block : block
  signal ~SYM[1] : ~TYP[3] := ~LIT[3]; -- ram
  signal ~SYM[2] : ~TYP[7]; -- inp
  signal ~SYM[3] : ~TYP[7]; -- outp
begin
  ~SYM[2] <= ~ARG[7];

  process(~CLKO)
  begin
    if rising_edge(~CLKO) then
      if ~ARG[6] then
        ~SYM[1](to_integer(~ARG[4])) <= ~SYM[2];
      end if;
      ~SYM[3] <= ~SYM[1](to_integer(~ARG[5]));
    end if;
  end process;

  ~RESULT <= ~SYM[3];
end block;"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Prelude.sassert"
    , "templateD" :
"~SYM[0]_block : block
begin
  -- pragma translate_off
  process(~CLK[2],~RST[2],~ARG[2],~ARG[3]) is
  begin
    if (rising_edge(~CLK[2]) or rising_edge(~RST[2])) then
      assert (~ARG[2] = ~ARG[3]) report (\"expected: \" & to_string (~ARG[3]) & \", actual: \" & to_string (~ARG[2])) severity error;
    end if;
  end process;
  -- pragma translate_on
  ~RESULT <= ~ARG[4];
end block;"
    }
  }
]
