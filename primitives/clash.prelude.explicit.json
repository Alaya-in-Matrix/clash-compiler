[ { "BlackBox" :
    { "name"      : "CLaSH.Prelude.Explicit.cblockRam"
    , "comment"   :
    "cblockRam :: (CPack a, KnownNat n, KnownNat m) -- (ARG[0],ARG[1],ARG[2])
          => Clock clk                -- clk,  ARG[3]
          -> Vec n a                  -- init, ARG[4]
          -> CSignal clk (Unsigned m) -- wr,   ARG[5]
          -> CSignal clk (Unsigned m) -- rd,   ARG[6]
          -> CSignal clk Bool         -- wren, ARG[7]
          -> CSignal clk a            -- din,  ARG[8]
          -> CSignal clk a"
    , "templateD" :
"~SYM[0]_block : block
  signal ~SYM[1] : ~TYP[4] := ~LIT[4]; -- ram
  signal ~SYM[2] : ~TYP[8]; -- inp
  signal ~SYM[3] : ~TYP[8]; -- outp
begin
  ~SYM[2] <= ~ARG[8];

  process(~CLKO)
  begin
    if rising_edge(~CLKO) then
      if ~ARG[7] then
        ~SYM[1](to_integer(~ARG[5])) <= ~SYM[2];
      end if;
      ~SYM[3] <= ~SYM[1](to_integer(~ARG[6]));
    end if;
  end process;

  ~RESULT <= ~SYM[3];
end block;"
    }
  }
, { "BlackBox" :
    { "name"      : "CLaSH.Prelude.Explicit.csassert"
    , "templateD" :
"~SYM[0]_block : block
begin
  -- pragma translate_off
  process(~CLK[2],~RST[2],~ARG[2],~ARG[3]) is
  begin
    if (rising_edge(~CLK[2]) or rising_edge(~RST[2])) then
      assert (~ARG[2] = ~ARG[3]) report (\"expected: \" & to_string (~ARG[3]) & \", actual: \" & to_string (~ARG[2])) severity error;
    end if;
  end process;
  -- pragma translate_on
  ~RESULT <= ~ARG[4];
end block;"
    }
  }
]
